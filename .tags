!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCEPTABLE	.\libhttpd\protocol.c	633;"	d	file:
AUTH_ALLOWED	.\src\auth.h	/^    AUTH_ALLOWED = 1, \/**< Client was granted access by the auth server *\/$/;"	e	enum:__anon9
AUTH_DENIED	.\src\auth.h	/^    AUTH_DENIED = 0, \/**< Client was denied by the auth server *\/$/;"	e	enum:__anon9
AUTH_ERROR	.\src\auth.h	/^    AUTH_ERROR = -1, \/**< An error occured during the validation process*\/$/;"	e	enum:__anon9
AUTH_LOCKED	.\src\auth.h	/^    AUTH_LOCKED = 254 \/**< Account has been locked *\/$/;"	e	enum:__anon9
AUTH_VALIDATION	.\src\auth.h	/^    AUTH_VALIDATION = 5, \/**< A misnomer.  Client is in 15 min probation to validate his new account *\/$/;"	e	enum:__anon9
AUTH_VALIDATION_FAILED	.\src\auth.h	/^    AUTH_VALIDATION_FAILED = 6, \/**< Client had X minutes to validate account by email and didn't = too late *\/$/;"	e	enum:__anon9
AuthHandler	.\contrib\load-tester\mock_auth.py	/^class AuthHandler(BaseHTTPRequestHandler):$/;"	c
BadStatusLine	.\contrib\load-tester\fire_requests.py	/^from httplib import BadStatusLine$/;"	i
BaseHTTPRequestHandler	.\contrib\load-tester\mock_auth.py	/^from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer$/;"	i
CHAIN_AUTHSERVERS	.\src\fw_iptables.h	39;"	d
CHAIN_AUTH_IS_DOWN	.\src\fw_iptables.h	46;"	d
CHAIN_GLOBAL	.\src\fw_iptables.h	40;"	d
CHAIN_INCOMING	.\src\fw_iptables.h	38;"	d
CHAIN_KNOWN	.\src\fw_iptables.h	42;"	d
CHAIN_LOCKED	.\src\fw_iptables.h	44;"	d
CHAIN_OUTGOING	.\src\fw_iptables.h	35;"	d
CHAIN_TO_INTERNET	.\src\fw_iptables.h	36;"	d
CHAIN_TO_ROUTER	.\src\fw_iptables.h	37;"	d
CHAIN_TRUSTED	.\src\fw_iptables.h	45;"	d
CHAIN_UNKNOWN	.\src\fw_iptables.h	43;"	d
CHAIN_VALIDATE	.\src\fw_iptables.h	41;"	d
DEC	.\libhttpd\protocol.c	200;"	d	file:
DEFAULT_ARPTABLE	.\src\conf.h	69;"	d
DEFAULT_AUTHSERVAUTHPATHFRAGMENT	.\src\conf.h	64;"	d
DEFAULT_AUTHSERVLOGINPATHFRAGMENT	.\src\conf.h	60;"	d
DEFAULT_AUTHSERVMSGPATHFRAGMENT	.\src\conf.h	62;"	d
DEFAULT_AUTHSERVPATH	.\src\conf.h	59;"	d
DEFAULT_AUTHSERVPINGPATHFRAGMENT	.\src\conf.h	63;"	d
DEFAULT_AUTHSERVPORT	.\src\conf.h	54;"	d
DEFAULT_AUTHSERVPORTALPATHFRAGMENT	.\src\conf.h	61;"	d
DEFAULT_AUTHSERVSSLAVAILABLE	.\src\conf.h	57;"	d
DEFAULT_AUTHSERVSSLCERTPATH	.\src\conf.h	65;"	d
DEFAULT_AUTHSERVSSLPEERVER	.\src\conf.h	67;"	d
DEFAULT_AUTHSERVSSLPORT	.\src\conf.h	55;"	d
DEFAULT_AUTHSERVSSLSNI	.\src\conf.h	70;"	d
DEFAULT_CHECKINTERVAL	.\src\conf.h	49;"	d
DEFAULT_CLIENTTIMEOUT	.\src\conf.h	48;"	d
DEFAULT_CONFIGFILE	.\src\conf.h	36;"	d
DEFAULT_CONFIGFILE	.\src\conf.h	39;"	d
DEFAULT_DAEMON	.\src\conf.h	42;"	d
DEFAULT_DEBUGLEVEL	.\src\conf.h	43;"	d
DEFAULT_DELTATRAFFIC	.\src\conf.h	68;"	d
DEFAULT_GATEWAYID	.\src\conf.h	45;"	d
DEFAULT_GATEWAYPORT	.\src\conf.h	46;"	d
DEFAULT_HTMLMSGFILE	.\src\conf.h	37;"	d
DEFAULT_HTMLMSGFILE	.\src\conf.h	40;"	d
DEFAULT_HTTPDMAXCONN	.\src\conf.h	44;"	d
DEFAULT_HTTPDNAME	.\src\conf.h	47;"	d
DEFAULT_INTERNAL_SOCK	.\src\conf.h	53;"	d
DEFAULT_LOG_SYSLOG	.\src\conf.h	50;"	d
DEFAULT_SOCK	.\src\wdctl.h	30;"	d
DEFAULT_SYSLOG_FACILITY	.\src\conf.h	51;"	d
DEFAULT_WDCTL_SOCK	.\src\conf.h	52;"	d
DEFAULT_WDCTL_SOCK	.\src\wdctl_thread.h	30;"	d
EXT_INTERFACE_DETECT_RETRY_INTERVAL	.\src\util.h	35;"	d
FWRULESET_AUTH_IS_DOWN	.\src\conf.h	78;"	d
FWRULESET_GLOBAL	.\src\conf.h	75;"	d
FWRULESET_KNOWN_USERS	.\src\conf.h	77;"	d
FWRULESET_LOCKED_USERS	.\src\conf.h	80;"	d
FWRULESET_UNKNOWN_USERS	.\src\conf.h	79;"	d
FWRULESET_VALIDATING_USERS	.\src\conf.h	76;"	d
FW_ACCESS_ALLOW	.\src\fw_iptables.h	/^    FW_ACCESS_ALLOW,$/;"	e	enum:fw_access_t_
FW_ACCESS_DENY	.\src\fw_iptables.h	/^    FW_ACCESS_DENY$/;"	e	enum:fw_access_t_
FW_MARK_AUTH_IS_DOWN	.\src\firewall.h	/^    FW_MARK_AUTH_IS_DOWN = 253, \/**< @brief The auth servers are down *\/$/;"	e	enum:_t_fw_marks
FW_MARK_KNOWN	.\src\firewall.h	/^    FW_MARK_KNOWN = 2,  \/**< @brief The client is known to the firewall *\/$/;"	e	enum:_t_fw_marks
FW_MARK_LOCKED	.\src\firewall.h	/^    FW_MARK_LOCKED = 254 \/**< @brief The client has been locked out *\/$/;"	e	enum:_t_fw_marks
FW_MARK_NONE	.\src\firewall.h	/^    FW_MARK_NONE = 0, \/**< @brief No mark set. *\/$/;"	e	enum:_t_fw_marks
FW_MARK_PROBATION	.\src\firewall.h	/^    FW_MARK_PROBATION = 1, \/**< @brief The client is in probation period and must be authenticated $/;"	e	enum:_t_fw_marks
GATEWAY_MESSAGE_ACCOUNT_LOGGED_OUT	.\src\centralserver.h	47;"	d
GATEWAY_MESSAGE_ACCOUNT_VALIDATION_FAILED	.\src\centralserver.h	45;"	d
GATEWAY_MESSAGE_ACTIVATE_ACCOUNT	.\src\centralserver.h	43;"	d
GATEWAY_MESSAGE_DENIED	.\src\centralserver.h	41;"	d
HTTPConnection	.\contrib\load-tester\fire_requests.py	/^from httplib import HTTPConnection$/;"	i
HTTPServer	.\contrib\load-tester\mock_auth.py	/^from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer$/;"	i
HTTP_ACL_DENY	.\install\include\wifidog\httpd.h	87;"	d
HTTP_ACL_DENY	.\libhttpd\httpd.h	87;"	d
HTTP_ACL_PERMIT	.\install\include\wifidog\httpd.h	86;"	d
HTTP_ACL_PERMIT	.\libhttpd\httpd.h	86;"	d
HTTP_ANY_ADDR	.\install\include\wifidog\httpd.h	64;"	d
HTTP_ANY_ADDR	.\libhttpd\httpd.h	64;"	d
HTTP_C_FUNCT	.\install\include\wifidog\httpd.h	73;"	d
HTTP_C_FUNCT	.\libhttpd\httpd.h	73;"	d
HTTP_C_WILDCARD	.\install\include\wifidog\httpd.h	77;"	d
HTTP_C_WILDCARD	.\libhttpd\httpd.h	77;"	d
HTTP_EMBER_FUNCT	.\install\include\wifidog\httpd.h	74;"	d
HTTP_EMBER_FUNCT	.\libhttpd\httpd.h	74;"	d
HTTP_FALSE	.\install\include\wifidog\httpd.h	70;"	d
HTTP_FALSE	.\libhttpd\httpd.h	70;"	d
HTTP_FILE	.\install\include\wifidog\httpd.h	72;"	d
HTTP_FILE	.\libhttpd\httpd.h	72;"	d
HTTP_GET	.\install\include\wifidog\httpd.h	66;"	d
HTTP_GET	.\libhttpd\httpd.h	66;"	d
HTTP_IP_ADDR_LEN	.\install\include\wifidog\httpd.h	61;"	d
HTTP_IP_ADDR_LEN	.\libhttpd\httpd.h	61;"	d
HTTP_MAX_AUTH	.\install\include\wifidog\httpd.h	60;"	d
HTTP_MAX_AUTH	.\libhttpd\httpd.h	60;"	d
HTTP_MAX_HEADERS	.\install\include\wifidog\httpd.h	59;"	d
HTTP_MAX_HEADERS	.\libhttpd\httpd.h	59;"	d
HTTP_MAX_LEN	.\install\include\wifidog\httpd.h	57;"	d
HTTP_MAX_LEN	.\libhttpd\httpd.h	57;"	d
HTTP_MAX_URL	.\install\include\wifidog\httpd.h	58;"	d
HTTP_MAX_URL	.\libhttpd\httpd.h	58;"	d
HTTP_METHOD_ERROR	.\install\include\wifidog\httpd.h	79;"	d
HTTP_METHOD_ERROR	.\libhttpd\httpd.h	79;"	d
HTTP_PORT	.\install\include\wifidog\httpd.h	56;"	d
HTTP_PORT	.\libhttpd\httpd.h	56;"	d
HTTP_POST	.\install\include\wifidog\httpd.h	67;"	d
HTTP_POST	.\libhttpd\httpd.h	67;"	d
HTTP_READ_BUF_LEN	.\install\include\wifidog\httpd.h	63;"	d
HTTP_READ_BUF_LEN	.\libhttpd\httpd.h	63;"	d
HTTP_STATIC	.\install\include\wifidog\httpd.h	75;"	d
HTTP_STATIC	.\libhttpd\httpd.h	75;"	d
HTTP_TIME_STRING_LEN	.\install\include\wifidog\httpd.h	62;"	d
HTTP_TIME_STRING_LEN	.\libhttpd\httpd.h	62;"	d
HTTP_TRUE	.\install\include\wifidog\httpd.h	69;"	d
HTTP_TRUE	.\libhttpd\httpd.h	69;"	d
HTTP_WILDCARD	.\install\include\wifidog\httpd.h	76;"	d
HTTP_WILDCARD	.\libhttpd\httpd.h	76;"	d
LEVEL_ERROR	.\libhttpd\httpd_priv.h	47;"	d
LEVEL_NOTICE	.\libhttpd\httpd_priv.h	46;"	d
LIBHTTPD_VENDOR	.\libhttpd\version.c	/^        LIBHTTPD_VENDOR[] =   "Hughes Technologies Pty Ltd";$/;"	v
LIBHTTPD_VERSION	.\libhttpd\version.c	/^char    LIBHTTPD_VERSION[] =  "1.4-wifidog",$/;"	v
LIB_HTTPD_H	.\install\include\wifidog\httpd.h	32;"	d
LIB_HTTPD_H	.\libhttpd\httpd.h	32;"	d
LIB_HTTPD_H_PRIV	.\libhttpd\httpd_priv.h	32;"	d
LOCK_CLIENT_LIST	.\src\client_list.h	113;"	d
LOCK_CONFIG	.\src\conf.h	228;"	d
LOCK_CYASSL_CTX	.\src\simple_http.c	141;"	d	file:
LOCK_GHBN	.\src\util.c	63;"	d	file:
MAX_BUF	.\src\common.h	31;"	d
MINIMUM_STARTED_TIME	.\src\ping_thread.h	31;"	d
NUM_EXT_INTERFACE_DETECT_RETRY	.\src\util.h	32;"	d
OpCodes	.\src\conf.c	/^} OpCodes;$/;"	t	typeref:enum:__anon10	file:
PORT	.\contrib\load-tester\fire_requests.py	/^PORT = "2060"$/;"	v
Pool	.\contrib\load-tester\fire_requests.py	/^from multiprocessing import Pool$/;"	i
Pool	.\contrib\load-tester\fire_wdctl.py	/^from multiprocessing import Pool$/;"	i
REQUEST_TYPE_COUNTERS	.\src\centralserver.h	38;"	d
REQUEST_TYPE_LOGIN	.\src\centralserver.h	34;"	d
REQUEST_TYPE_LOGOUT	.\src\centralserver.h	36;"	d
TARGET_ACCEPT	.\src\conf.h	/^    TARGET_ACCEPT,$/;"	e	enum:__anon12
TARGET_DROP	.\src\conf.h	/^    TARGET_DROP,$/;"	e	enum:__anon12
TARGET_LOG	.\src\conf.h	/^    TARGET_LOG,$/;"	e	enum:__anon12
TARGET_REJECT	.\src\conf.h	/^    TARGET_REJECT,$/;"	e	enum:__anon12
TARGET_ULOG	.\src\conf.h	/^    TARGET_ULOG$/;"	e	enum:__anon12
TO_NEXT_WORD	.\src\conf.c	416;"	d	file:
UNLOCK_CLIENT_LIST	.\src\client_list.h	119;"	d
UNLOCK_CONFIG	.\src\conf.h	234;"	d
UNLOCK_CYASSL_CTX	.\src\simple_http.c	147;"	d	file:
UNLOCK_GHBN	.\src\util.c	69;"	d	file:
URL_XALPHAS	.\libhttpd\protocol.c	618;"	d	file:
URL_XPALPHAS	.\libhttpd\protocol.c	619;"	d	file:
WDCTL_KILL	.\src\wdctl.h	35;"	d
WDCTL_RESTART	.\src\wdctl.h	36;"	d
WDCTL_STATUS	.\src\wdctl.h	33;"	d
WDCTL_STOP	.\src\wdctl.h	34;"	d
WDCTL_UNDEF	.\src\wdctl.h	32;"	d
WD_SHELL_PATH	.\src\util.c	77;"	d	file:
WD_SHELL_PATH	.\src\util.c	79;"	d	file:
_AUTH_H_	.\src\auth.h	29;"	d
_CENTRALSERVER_H_	.\src\centralserver.h	29;"	d
_CLIENT_LIST_H_	.\src\client_list.h	29;"	d
_COMMANDLINE_H_	.\src\commandline.h	29;"	d
_COMMON_H_	.\src\common.h	28;"	d
_CONFIG_H_	.\src\conf.h	29;"	d
_DEBUG_H_	.\src\debug.h	28;"	d
_DECODE_MAXVAL	.\libhttpd\protocol.c	201;"	d	file:
_FIREWALL_H_	.\src\firewall.h	29;"	d
_FW_IPTABLES_H_	.\src\fw_iptables.h	29;"	d
_GATEWAY_H_	.\src\gateway.h	29;"	d
_GNU_SOURCE	.\src\auth.c	28;"	d	file:
_GNU_SOURCE	.\src\client_list.c	27;"	d	file:
_GNU_SOURCE	.\src\conf.c	29;"	d	file:
_GNU_SOURCE	.\src\firewall.c	29;"	d	file:
_GNU_SOURCE	.\src\fw_iptables.c	29;"	d	file:
_GNU_SOURCE	.\src\http.c	31;"	d	file:
_GNU_SOURCE	.\src\httpd_thread.c	28;"	d	file:
_GNU_SOURCE	.\src\ping_thread.c	30;"	d	file:
_GNU_SOURCE	.\src\safe.c	29;"	d	file:
_GNU_SOURCE	.\src\util.c	29;"	d	file:
_GNU_SOURCE	.\src\wd_util.c	28;"	d	file:
_GNU_SOURCE	.\src\wdctl.c	27;"	d	file:
_GNU_SOURCE	.\src\wdctl_thread.c	27;"	d	file:
_HTTPD_THREAD_H_	.\src\httpd_thread.h	28;"	d
_HTTP_H_	.\src\http.h	28;"	d
_PING_THREAD_H_	.\src\ping_thread.h	29;"	d
_PSTRING_H_	.\src\pstring.h	28;"	d
_SAFE_H_	.\src\safe.h	29;"	d
_SIMPLE_HTTP_H_	.\src\simple_http.h	23;"	d
_UTIL_H_	.\src\util.h	28;"	d
_WDCTL_H_	.\src\wdctl.h	28;"	d
_WDCTL_THREAD_H_	.\src\wdctl_thread.h	28;"	d
_WD_UTIL_H_	.\src\wd_util.h	28;"	d
__ANSI_PROTO	.\install\include\wifidog\httpd.h	38;"	d
__ANSI_PROTO	.\install\include\wifidog\httpd.h	40;"	d
__ANSI_PROTO	.\libhttpd\httpd.h	38;"	d
__ANSI_PROTO	.\libhttpd\httpd.h	40;"	d
__ANSI_PROTO	.\libhttpd\httpd_priv.h	36;"	d
__ANSI_PROTO	.\libhttpd\httpd_priv.h	38;"	d
_auth_serv_t	.\src\conf.h	/^typedef struct _auth_serv_t {$/;"	s
_connect_auth_server	.\src\centralserver.c	/^_connect_auth_server(int level)$/;"	f
_debug	.\src\debug.c	/^_debug(const char *filename, int line, int level, const char *format, ...)$/;"	f
_debug_conf	.\src\debug.h	/^typedef struct _debug_conf {$/;"	s
_fd_list	.\src\safe.c	/^typedef struct _fd_list {$/;"	s	file:
_firewall_rule_t	.\src\conf.h	/^typedef struct _firewall_rule_t {$/;"	s
_firewall_ruleset_t	.\src\conf.h	/^typedef struct _firewall_ruleset_t {$/;"	s
_fw_deny_raw	.\src\firewall.c	/^_fw_deny_raw(const char *ip, const char *mac, const int mark)$/;"	f	file:
_httpd_catFile	.\libhttpd\protocol.c	/^_httpd_catFile(request * r, const char *path)$/;"	f
_httpd_checkLastModified	.\libhttpd\protocol.c	/^_httpd_checkLastModified(request * r, int modTime)$/;"	f
_httpd_content	.\install\include\wifidog\httpd.h	/^    typedef struct _httpd_content {$/;"	s
_httpd_content	.\libhttpd\httpd.h	/^    typedef struct _httpd_content {$/;"	s
_httpd_decode	.\libhttpd\protocol.c	/^_httpd_decode(bufcoded, bufplain, outbufsize)$/;"	f
_httpd_dir	.\install\include\wifidog\httpd.h	/^    typedef struct _httpd_dir {$/;"	s
_httpd_dir	.\libhttpd\httpd.h	/^    typedef struct _httpd_dir {$/;"	s
_httpd_escape	.\libhttpd\protocol.c	/^_httpd_escape(str)$/;"	f
_httpd_findContentDir	.\libhttpd\protocol.c	/^_httpd_findContentDir(server, dir, createFlag)$/;"	f
_httpd_findContentEntry	.\libhttpd\protocol.c	/^_httpd_findContentEntry(request * r, httpDir * dir, char *entryName)$/;"	f
_httpd_formatTimeString	.\libhttpd\protocol.c	/^_httpd_formatTimeString(char *ptr, int clock)$/;"	f
_httpd_freeVariables	.\libhttpd\protocol.c	/^_httpd_freeVariables(var)$/;"	f
_httpd_from_hex	.\libhttpd\protocol.c	/^_httpd_from_hex(char c)$/;"	f
_httpd_net_read	.\libhttpd\protocol.c	/^_httpd_net_read(sock, buf, len)$/;"	f
_httpd_net_write	.\libhttpd\protocol.c	/^_httpd_net_write(sock, buf, len)$/;"	f
_httpd_readBuf	.\libhttpd\protocol.c	/^_httpd_readBuf(request * r, char *destBuf, int len)$/;"	f
_httpd_readChar	.\libhttpd\protocol.c	/^_httpd_readChar(request * r, char *cp)$/;"	f
_httpd_readLine	.\libhttpd\protocol.c	/^_httpd_readLine(request * r, char *destBuf, int len)$/;"	f
_httpd_sanitiseUrl	.\libhttpd\protocol.c	/^_httpd_sanitiseUrl(url)$/;"	f
_httpd_send304	.\libhttpd\protocol.c	/^_httpd_send304(httpd * server, request * r)$/;"	f
_httpd_send403	.\libhttpd\protocol.c	/^_httpd_send403(httpd * server, request * r)$/;"	f
_httpd_send404	.\libhttpd\protocol.c	/^_httpd_send404(httpd * server, request * r)$/;"	f
_httpd_sendDirectoryEntry	.\libhttpd\protocol.c	/^_httpd_sendDirectoryEntry(httpd * server, request * r, httpContent * entry, char *entryName)$/;"	f
_httpd_sendFile	.\libhttpd\protocol.c	/^_httpd_sendFile(httpd * server, request * r, char *path)$/;"	f
_httpd_sendHeaders	.\libhttpd\protocol.c	/^_httpd_sendHeaders(request * r, int contentLength, int modTime)$/;"	f
_httpd_sendStatic	.\libhttpd\protocol.c	/^_httpd_sendStatic(httpd * server, request * r, char *data)$/;"	f
_httpd_sendText	.\libhttpd\protocol.c	/^_httpd_sendText(request * r, char *msg)$/;"	f
_httpd_storeData	.\libhttpd\protocol.c	/^_httpd_storeData(request * r, char *query)$/;"	f
_httpd_unescape	.\libhttpd\protocol.c	/^_httpd_unescape(str)$/;"	f
_httpd_var	.\install\include\wifidog\httpd.h	/^    typedef struct _httpd_var {$/;"	s
_httpd_var	.\libhttpd\httpd.h	/^    typedef struct _httpd_var {$/;"	s
_httpd_writeAccessLog	.\libhttpd\protocol.c	/^_httpd_writeAccessLog(httpd * server, request * r)$/;"	f
_httpd_writeErrorLog	.\libhttpd\protocol.c	/^_httpd_writeErrorLog(httpd * server, request * r, char *level, char *message)$/;"	f
_isInCidrBlock	.\libhttpd\ip_acl.c	/^_isInCidrBlock(httpd * server, request * r, int addr1, int len1, int addr2, int len2)$/;"	f	file:
_parse_firewall_rule	.\src\conf.c	/^_parse_firewall_rule(const char *ruleset, char *leftover)$/;"	f	file:
_popular_server_t	.\src\conf.h	/^typedef struct _popular_server_t {$/;"	s
_pstr_grow	.\src\pstring.c	/^_pstr_grow(pstr_t *pstr)$/;"	f	file:
_t_authresponse	.\src\auth.h	/^typedef struct _t_authresponse {$/;"	s
_t_client	.\src\client_list.h	/^typedef struct _t_client {$/;"	s
_t_counters	.\src\client_list.h	/^typedef struct _t_counters {$/;"	s
_t_fw_marks	.\src\firewall.h	/^typedef enum _t_fw_marks {$/;"	g
_trusted_mac_t	.\src\conf.h	/^typedef struct _trusted_mac_t {$/;"	s
accessLog	.\install\include\wifidog\httpd.h	/^        FILE *accessLog, *errorLog;$/;"	m	struct:__anon3
accessLog	.\libhttpd\httpd.h	/^        FILE *accessLog, *errorLog;$/;"	m	struct:__anon7
action	.\install\include\wifidog\httpd.h	/^        char len, action;$/;"	m	struct:ip_acl_s
action	.\libhttpd\httpd.h	/^        char len, action;$/;"	m	struct:ip_acl_s
add_popular_server	.\src\conf.c	/^add_popular_server(const char *server)$/;"	f	file:
addr	.\install\include\wifidog\httpd.h	/^        int addr;$/;"	m	struct:ip_acl_s
addr	.\libhttpd\httpd.h	/^        int addr;$/;"	m	struct:ip_acl_s
append_x_restartargv	.\src\gateway.c	/^append_x_restartargv(void)$/;"	f
argparse	.\contrib\load-tester\common.py	/^import argparse$/;"	i
args	.\contrib\load-tester\fire_requests.py	/^    args = parser.parse_args()$/;"	v
args	.\contrib\load-tester\fire_wdctl.py	/^    args = parser.parse_args()$/;"	v
arp_get	.\src\firewall.c	/^arp_get(const char *req_ip)$/;"	f
arp_table_path	.\src\conf.h	/^    char *arp_table_path; \/**< @brief Path to custom ARP table, formatted$/;"	m	struct:__anon13
authLength	.\install\include\wifidog\httpd.h	/^        int method, contentLength, authLength;$/;"	m	struct:__anon1
authLength	.\libhttpd\httpd.h	/^        int method, contentLength, authLength;$/;"	m	struct:__anon5
authPassword	.\install\include\wifidog\httpd.h	/^        char authPassword[HTTP_MAX_AUTH];$/;"	m	struct:__anon1
authPassword	.\libhttpd\httpd.h	/^        char authPassword[HTTP_MAX_AUTH];$/;"	m	struct:__anon5
authUser	.\install\include\wifidog\httpd.h	/^        char authUser[HTTP_MAX_AUTH];$/;"	m	struct:__anon1
authUser	.\libhttpd\httpd.h	/^        char authUser[HTTP_MAX_AUTH];$/;"	m	struct:__anon5
auth_server_request	.\src\centralserver.c	/^auth_server_request(t_authresponse * authresponse, const char *request_type, const char *ip, const char *mac,$/;"	f
auth_servers	.\src\conf.h	/^    t_auth_serv *auth_servers;  \/**< @brief Auth servers list *\/$/;"	m	struct:__anon13
authcode	.\src\auth.h	/^    t_authcode authcode; \/**< Authentication code returned by the server *\/$/;"	m	struct:_t_authresponse
authenticate_client	.\src\auth.c	/^authenticate_client(request * r)$/;"	f
authserv_auth_script_path_fragment	.\src\conf.h	/^    char *authserv_auth_script_path_fragment;   \/**< @brief This is the script that talks the wifidog gateway protocol. *\/$/;"	m	struct:_auth_serv_t
authserv_hostname	.\src\conf.h	/^    char *authserv_hostname;    \/**< @brief Hostname of the central server *\/$/;"	m	struct:_auth_serv_t
authserv_http_port	.\src\conf.h	/^    int authserv_http_port;     \/**< @brief Http port the central server$/;"	m	struct:_auth_serv_t
authserv_login_script_path_fragment	.\src\conf.h	/^    char *authserv_login_script_path_fragment;  \/**< @brief This is the script the user will be sent to for login. *\/$/;"	m	struct:_auth_serv_t
authserv_msg_script_path_fragment	.\src\conf.h	/^    char *authserv_msg_script_path_fragment;    \/**< @brief This is the script the user will be sent to upon error to read a readable message. *\/$/;"	m	struct:_auth_serv_t
authserv_path	.\src\conf.h	/^    char *authserv_path;        \/**< @brief Path where wifidog resides *\/$/;"	m	struct:_auth_serv_t
authserv_ping_script_path_fragment	.\src\conf.h	/^    char *authserv_ping_script_path_fragment;   \/**< @brief This is the ping heartbeating script. *\/$/;"	m	struct:_auth_serv_t
authserv_portal_script_path_fragment	.\src\conf.h	/^    char *authserv_portal_script_path_fragment; \/**< @brief This is the script the user will be sent to after a successfull login. *\/$/;"	m	struct:_auth_serv_t
authserv_ssl_port	.\src\conf.h	/^    int authserv_ssl_port;      \/**< @brief Https port the central server$/;"	m	struct:_auth_serv_t
authserv_use_ssl	.\src\conf.h	/^    int authserv_use_ssl;       \/**< @brief Use SSL or not *\/$/;"	m	struct:_auth_serv_t
buf	.\src\pstring.h	/^    char *buf;   \/**< @brief Buffer used to hold string. Pointer subject to change. *\/$/;"	m	struct:pstr
check_mac_format	.\src\conf.c	/^check_mac_format(char *possiblemac)$/;"	f
checkinterval	.\src\conf.h	/^    int checkinterval;          \/**< @brief Frequency the the client timeout check$/;"	m	struct:__anon13
children	.\install\include\wifidog\httpd.h	/^        struct _httpd_dir *children, *next;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::_httpd_dir
children	.\libhttpd\httpd.h	/^        struct _httpd_dir *children, *next;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::_httpd_dir
cleanup	.\contrib\load-tester\run.sh	/^function cleanup() {$/;"	f
cleanup_fds	.\src\safe.c	/^cleanup_fds(void)$/;"	f	file:
clientAddr	.\install\include\wifidog\httpd.h	/^        char readBuf[HTTP_READ_BUF_LEN + 1], *readBufPtr, clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon4
clientAddr	.\libhttpd\httpd.h	/^        char readBuf[HTTP_READ_BUF_LEN + 1], *readBufPtr, clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon8
clientSock	.\install\include\wifidog\httpd.h	/^        int clientSock, readBufRemain;$/;"	m	struct:__anon4
clientSock	.\libhttpd\httpd.h	/^        int clientSock, readBufRemain;$/;"	m	struct:__anon8
client_dup	.\src\client_list.c	/^client_dup(const t_client * src)$/;"	f
client_free_node	.\src\client_list.c	/^client_free_node(t_client * client)$/;"	f
client_get_first_client	.\src\client_list.c	/^client_get_first_client(void)$/;"	f
client_get_new	.\src\client_list.c	/^client_get_new(void)$/;"	f
client_id	.\src\client_list.c	/^static volatile unsigned long long client_id = 1;$/;"	v	file:
client_id_mutex	.\src\client_list.c	/^static pthread_mutex_t client_id_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
client_list_add	.\src\client_list.c	/^client_list_add(const char *ip, const char *mac, const char *token)$/;"	f
client_list_delete	.\src\client_list.c	/^client_list_delete(t_client * client)$/;"	f
client_list_destroy	.\src\client_list.c	/^client_list_destroy(t_client * list)$/;"	f
client_list_dup	.\src\client_list.c	/^client_list_dup(t_client ** dest)$/;"	f
client_list_find	.\src\client_list.c	/^client_list_find(const char *ip, const char *mac)$/;"	f
client_list_find_by_client	.\src\client_list.c	/^client_list_find_by_client(t_client * client)$/;"	f
client_list_find_by_ip	.\src\client_list.c	/^client_list_find_by_ip(const char *ip)$/;"	f
client_list_find_by_mac	.\src\client_list.c	/^client_list_find_by_mac(const char *mac)$/;"	f
client_list_find_by_token	.\src\client_list.c	/^client_list_find_by_token(const char *token)$/;"	f
client_list_init	.\src\client_list.c	/^client_list_init(void)$/;"	f
client_list_insert_client	.\src\client_list.c	/^client_list_insert_client(t_client * client)$/;"	f
client_list_mutex	.\src\client_list.c	/^pthread_mutex_t client_list_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
client_list_remove	.\src\client_list.c	/^client_list_remove(t_client * client)$/;"	f
clienttimeout	.\src\conf.h	/^    int clienttimeout;          \/**< @brief How many CheckIntervals before a client$/;"	m	struct:__anon13
close_icmp_socket	.\src\util.c	/^close_icmp_socket(void)$/;"	f
command	.\src\wdctl.h	/^    int command;$/;"	m	struct:__anon14
common	.\contrib\load-tester\fire_requests.py	/^import common$/;"	i
common	.\contrib\load-tester\fire_wdctl.py	/^import common$/;"	i
config	.\src\conf.c	/^static s_config config;$/;"	v	file:
config	.\src\wdctl.c	/^static s_config config;$/;"	v	file:
config_get_config	.\src\conf.c	/^config_get_config(void)$/;"	f
config_init	.\src\conf.c	/^config_init(void)$/;"	f
config_init_override	.\src\conf.c	/^config_init_override(void)$/;"	f
config_mutex	.\src\conf.c	/^pthread_mutex_t config_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
config_notnull	.\src\conf.c	/^config_notnull(const void *parm, const char *parmname)$/;"	f	file:
config_parse_token	.\src\conf.c	/^config_parse_token(const char *cp, const char *filename, int linenum)$/;"	f	file:
config_read	.\src\conf.c	/^config_read(const char *filename)$/;"	f
config_validate	.\src\conf.c	/^config_validate(void)$/;"	f
configfile	.\src\conf.h	/^    char *configfile;       \/**< @brief name of the config file *\/$/;"	m	struct:__anon13
connect_auth_server	.\src\centralserver.c	/^connect_auth_server()$/;"	f
connect_to_server	.\src\wdctl.c	/^connect_to_server(const char *sock_name)$/;"	f	file:
content	.\install\include\wifidog\httpd.h	/^        httpContent *content;$/;"	m	struct:__anon2
content	.\install\include\wifidog\httpd.h	/^        httpDir *content;$/;"	m	struct:__anon3
content	.\libhttpd\httpd.h	/^        httpContent *content;$/;"	m	struct:__anon6
content	.\libhttpd\httpd.h	/^        httpDir *content;$/;"	m	struct:__anon7
contentLength	.\install\include\wifidog\httpd.h	/^        int method, contentLength, authLength;$/;"	m	struct:__anon1
contentLength	.\libhttpd\httpd.h	/^        int method, contentLength, authLength;$/;"	m	struct:__anon5
contentType	.\install\include\wifidog\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon2
contentType	.\libhttpd\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon6
counters	.\src\client_list.h	/^    t_counters counters;                \/**< @brief Counters for input\/output of$/;"	m	struct:_t_client
create_unix_socket	.\src\wdctl_thread.c	/^create_unix_socket(const char *sock_name)$/;"	f	file:
cyassl_ctx	.\src\simple_http.c	/^static CYASSL_CTX *cyassl_ctx = NULL;$/;"	v	file:
cyassl_ctx_mutex	.\src\simple_http.c	/^static pthread_mutex_t cyassl_ctx_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
daemon	.\src\conf.h	/^    int daemon;                 \/**< @brief if daemon > 0, use daemon mode *\/$/;"	m	struct:__anon13
data	.\install\include\wifidog\httpd.h	/^        char *data, *path;$/;"	m	struct:_httpd_content
data	.\libhttpd\httpd.h	/^        char *data, *path;$/;"	m	struct:_httpd_content
debug	.\src\debug.h	44;"	d
debugconf	.\src\debug.c	/^debugconf_t debugconf = {$/;"	v
debugconf_t	.\src\debug.h	/^} debugconf_t;$/;"	t	typeref:struct:_debug_conf
debuglevel	.\src\debug.h	/^    int debuglevel;      \/**< @brief Debug information verbosity *\/$/;"	m	struct:_debug_conf
defaultAcl	.\install\include\wifidog\httpd.h	/^        httpAcl *defaultAcl;$/;"	m	struct:__anon3
defaultAcl	.\libhttpd\httpd.h	/^        httpAcl *defaultAcl;$/;"	m	struct:__anon7
deltatraffic	.\src\conf.h	/^    int deltatraffic;                   \/**< @brief reset each user's traffic (Outgoing and Incoming) value after each Auth operation. *\/$/;"	m	struct:__anon13
do_GET	.\contrib\load-tester\mock_auth.py	/^    def do_GET(self):$/;"	m	class:AuthHandler
entries	.\install\include\wifidog\httpd.h	/^        struct _httpd_content *entries;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::_httpd_content
entries	.\libhttpd\httpd.h	/^        struct _httpd_content *entries;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::_httpd_content
errorFunction304	.\install\include\wifidog\httpd.h	/^        void (*errorFunction304) (), (*errorFunction403) (), (*errorFunction404) ();$/;"	m	struct:__anon3
errorFunction304	.\libhttpd\httpd.h	/^        void (*errorFunction304) (), (*errorFunction403) (), (*errorFunction404) ();$/;"	m	struct:__anon7
errorLog	.\install\include\wifidog\httpd.h	/^        FILE *accessLog, *errorLog;$/;"	m	struct:__anon3
errorLog	.\libhttpd\httpd.h	/^        FILE *accessLog, *errorLog;$/;"	m	struct:__anon7
execute	.\src\util.c	/^execute(const char *cmd_line, int quiet)$/;"	f
external_interface	.\src\conf.h	/^    char *external_interface;   \/**< @brief External network interface name for$/;"	m	struct:__anon13
fcntl	.\contrib\load-tester\common.py	/^import fcntl$/;"	i
fd	.\src\client_list.h	/^    int fd;                             \/**< @brief Client HTTP socket (valid only$/;"	m	struct:_t_client
fd	.\src\safe.c	/^    int fd;                 \/**< @brief file descriptor *\/$/;"	m	struct:_fd_list	file:
fd_list	.\src\safe.c	/^static fd_list_t *fd_list = NULL;$/;"	v	file:
fd_list_t	.\src\safe.c	/^} fd_list_t;$/;"	t	typeref:struct:_fd_list	file:
fileBasePath	.\install\include\wifidog\httpd.h	/^        char fileBasePath[HTTP_MAX_URL], *host;$/;"	m	struct:__anon3
fileBasePath	.\libhttpd\httpd.h	/^        char fileBasePath[HTTP_MAX_URL], *host;$/;"	m	struct:__anon7
firstclient	.\src\client_list.c	/^static t_client *firstclient = NULL;$/;"	v	file:
function	.\install\include\wifidog\httpd.h	/^        void (*function) ();$/;"	m	struct:_httpd_content
function	.\libhttpd\httpd.h	/^        void (*function) ();$/;"	m	struct:_httpd_content
functools	.\contrib\load-tester\fire_requests.py	/^import functools$/;"	i
functools	.\contrib\load-tester\fire_wdctl.py	/^import functools$/;"	i
fw_access_t	.\src\fw_iptables.h	/^} fw_access_t;$/;"	t	typeref:enum:fw_access_t_
fw_access_t_	.\src\fw_iptables.h	/^typedef enum fw_access_t_ {$/;"	g
fw_allow	.\src\firewall.c	/^fw_allow(t_client * client, int new_fw_connection_state)$/;"	f
fw_allow_host	.\src\firewall.c	/^fw_allow_host(const char *host)$/;"	f
fw_clear_authservers	.\src\firewall.c	/^fw_clear_authservers(void)$/;"	f
fw_connection_state	.\src\client_list.h	/^    int fw_connection_state;     \/**< @brief Connection state in the$/;"	m	struct:_t_client
fw_deny	.\src\firewall.c	/^fw_deny(t_client * client)$/;"	f
fw_destroy	.\src\firewall.c	/^fw_destroy(void)$/;"	f
fw_init	.\src\firewall.c	/^fw_init(void)$/;"	f
fw_quiet	.\src\fw_iptables.c	/^static int fw_quiet = 0;$/;"	v	file:
fw_set_authdown	.\src\firewall.c	/^fw_set_authdown(void)$/;"	f
fw_set_authservers	.\src\firewall.c	/^fw_set_authservers(void)$/;"	f
fw_set_authup	.\src\firewall.c	/^fw_set_authup(void)$/;"	f
fw_sync_with_authserver	.\src\firewall.c	/^fw_sync_with_authserver(void)$/;"	f
get_argparser	.\contrib\load-tester\common.py	/^def get_argparser():$/;"	f
get_auth_server	.\src\conf.c	/^get_auth_server(void)$/;"	f
get_clients_from_parent	.\src\gateway.c	/^get_clients_from_parent(void)$/;"	f
get_cyassl_ctx	.\src\simple_http.c	/^get_cyassl_ctx(const char *hostname)$/;"	f	file:
get_ext_iface	.\src\util.c	/^get_ext_iface(void)$/;"	f
get_iface_ip	.\src\util.c	/^get_iface_ip(const char *ifname)$/;"	f
get_iface_mac	.\src\util.c	/^get_iface_mac(const char *ifname)$/;"	f
get_ip_address	.\contrib\load-tester\common.py	/^def get_ip_address(ifname):$/;"	f
get_mac_address	.\contrib\load-tester\common.py	/^def get_mac_address(ifname):$/;"	f
get_ruleset	.\src\conf.c	/^get_ruleset(const char *ruleset)$/;"	f
get_status_text	.\src\wd_util.c	/^get_status_text()$/;"	f
getdatum	.\contrib\load-tester\plot_memory.sh	/^function getdatum {$/;"	f
ghbn_mutex	.\src\util.c	/^static pthread_mutex_t ghbn_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
gw_address	.\src\conf.h	/^    char *gw_address;           \/**< @brief Internal IP address for our web$/;"	m	struct:__anon13
gw_id	.\src\conf.h	/^    char *gw_id;                \/**< @brief ID of the Gateway, sent to central$/;"	m	struct:__anon13
gw_interface	.\src\conf.h	/^    char *gw_interface;         \/**< @brief Interface we will accept connections on *\/$/;"	m	struct:__anon13
gw_main	.\src\gateway.c	/^gw_main(int argc, char **argv)$/;"	f
gw_port	.\src\conf.h	/^    int gw_port;                \/**< @brief Port the webserver will run on *\/$/;"	m	struct:__anon13
headers	.\install\include\wifidog\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon2
headers	.\libhttpd\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon6
headersSent	.\install\include\wifidog\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon2
headersSent	.\libhttpd\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon6
hex	.\libhttpd\protocol.c	/^static char *hex = "0123456789ABCDEF";$/;"	v	file:
host	.\install\include\wifidog\httpd.h	/^        char fileBasePath[HTTP_MAX_URL], *host;$/;"	m	struct:__anon3
host	.\install\include\wifidog\httpd.h	/^        char path[HTTP_MAX_URL], query[HTTP_MAX_URL], host[HTTP_MAX_URL],       \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon1
host	.\libhttpd\httpd.h	/^        char fileBasePath[HTTP_MAX_URL], *host;$/;"	m	struct:__anon7
host	.\libhttpd\httpd.h	/^        char path[HTTP_MAX_URL], query[HTTP_MAX_URL], host[HTTP_MAX_URL],       \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon5
hostname	.\src\conf.h	/^    char *hostname;$/;"	m	struct:_popular_server_t
htmlmsgfile	.\src\conf.h	/^    char *htmlmsgfile;          \/**< @brief name of the HTML file used for messages *\/$/;"	m	struct:__anon13
httpAcl	.\install\include\wifidog\httpd.h	/^    } httpAcl;$/;"	t	typeref:struct:ip_acl_s
httpAcl	.\libhttpd\httpd.h	/^    } httpAcl;$/;"	t	typeref:struct:ip_acl_s
httpContent	.\install\include\wifidog\httpd.h	/^    } httpContent;$/;"	t	typeref:struct:_httpd_content
httpContent	.\libhttpd\httpd.h	/^    } httpContent;$/;"	t	typeref:struct:_httpd_content
httpDir	.\install\include\wifidog\httpd.h	/^    } httpDir;$/;"	t	typeref:struct:_httpd_dir
httpDir	.\libhttpd\httpd.h	/^    } httpDir;$/;"	t	typeref:struct:_httpd_dir
httpReq	.\install\include\wifidog\httpd.h	/^    } httpReq;$/;"	t	typeref:struct:__anon1
httpReq	.\libhttpd\httpd.h	/^    } httpReq;$/;"	t	typeref:struct:__anon5
httpRes	.\install\include\wifidog\httpd.h	/^    } httpRes;$/;"	t	typeref:struct:__anon2
httpRes	.\libhttpd\httpd.h	/^    } httpRes;$/;"	t	typeref:struct:__anon6
httpVar	.\install\include\wifidog\httpd.h	/^    } httpVar;$/;"	t	typeref:struct:_httpd_var
httpVar	.\libhttpd\httpd.h	/^    } httpVar;$/;"	t	typeref:struct:_httpd_var
http_callback_404	.\src\http.c	/^http_callback_404(httpd * webserver, request * r, int error_code)$/;"	f
http_callback_about	.\src\http.c	/^http_callback_about(httpd * webserver, request * r)$/;"	f
http_callback_auth	.\src\http.c	/^http_callback_auth(httpd * webserver, request * r)$/;"	f
http_callback_disconnect	.\src\http.c	/^http_callback_disconnect(httpd * webserver, request * r)$/;"	f
http_callback_status	.\src\http.c	/^http_callback_status(httpd * webserver, request * r)$/;"	f
http_callback_wifidog	.\src\http.c	/^http_callback_wifidog(httpd * webserver, request * r)$/;"	f
http_get	.\src\simple_http.c	/^http_get(const int sockfd, const char *req)$/;"	f
http_send_redirect	.\src\http.c	/^http_send_redirect(request * r, const char *url, const char *text)$/;"	f
http_send_redirect_to_auth	.\src\http.c	/^http_send_redirect_to_auth(request * r, const char *urlFragment, const char *text)$/;"	f
httpd	.\install\include\wifidog\httpd.h	/^    } httpd;$/;"	t	typeref:struct:__anon3
httpd	.\libhttpd\httpd.h	/^    } httpd;$/;"	t	typeref:struct:__anon7
httpdAddAcl	.\libhttpd\ip_acl.c	/^httpdAddAcl(server, acl, cidr, action)$/;"	f
httpdAddCContent	.\libhttpd\api.c	/^httpdAddCContent(server, dir, name, indexFlag, preload, function)$/;"	f
httpdAddCWildcardContent	.\libhttpd\api.c	/^httpdAddCWildcardContent(server, dir, preload, function)$/;"	f
httpdAddFileContent	.\libhttpd\api.c	/^httpdAddFileContent(server, dir, name, indexFlag, preload, path)$/;"	f
httpdAddHeader	.\libhttpd\api.c	/^httpdAddHeader(request * r, const char *msg)$/;"	f
httpdAddStaticContent	.\libhttpd\api.c	/^httpdAddStaticContent(server, dir, name, indexFlag, preload, data)$/;"	f
httpdAddVariable	.\libhttpd\api.c	/^httpdAddVariable(request * r, const char *name, const char *value)$/;"	f
httpdAddWildcardContent	.\libhttpd\api.c	/^httpdAddWildcardContent(server, dir, preload, path)$/;"	f
httpdAuthenticate	.\libhttpd\api.c	/^httpdAuthenticate(request * r, const char *realm)$/;"	f
httpdCheckAcl	.\libhttpd\ip_acl.c	/^httpdCheckAcl(httpd * server, request * r, httpAcl * acl)$/;"	f
httpdCreate	.\libhttpd\api.c	/^httpdCreate(host, port)$/;"	f
httpdDestroy	.\libhttpd\api.c	/^httpdDestroy(server)$/;"	f
httpdDumpVariables	.\libhttpd\api.c	/^httpdDumpVariables(request * r)$/;"	f
httpdEndRequest	.\libhttpd\api.c	/^httpdEndRequest(request * r)$/;"	f
httpdForceAuthenticate	.\libhttpd\api.c	/^httpdForceAuthenticate(request * r, const char *realm)$/;"	f
httpdFreeVariables	.\libhttpd\api.c	/^httpdFreeVariables(request * r)$/;"	f
httpdGetConnection	.\libhttpd\api.c	/^httpdGetConnection(server, timeout)$/;"	f
httpdGetNextVariableByPrefix	.\libhttpd\api.c	/^httpdGetNextVariableByPrefix(curVar, prefix)$/;"	f
httpdGetVariableByName	.\libhttpd\api.c	/^httpdGetVariableByName(request * r, const char *name)$/;"	f
httpdGetVariableByPrefix	.\libhttpd\api.c	/^httpdGetVariableByPrefix(request * r, const char *prefix)$/;"	f
httpdGetVariableByPrefixedName	.\libhttpd\api.c	/^httpdGetVariableByPrefixedName(request * r, const char *prefix, const char *name)$/;"	f
httpdOutput	.\libhttpd\api.c	/^httpdOutput(request * r, const char *msg)$/;"	f
httpdPrintf	.\libhttpd\api.c	/^httpdPrintf(request * r, const char *fmt, ...)$/;"	f
httpdProcessRequest	.\libhttpd\api.c	/^httpdProcessRequest(httpd * server, request * r)$/;"	f
httpdReadRequest	.\libhttpd\api.c	/^httpdReadRequest(httpd * server, request * r)$/;"	f
httpdRequestContentLength	.\install\include\wifidog\httpd.h	84;"	d
httpdRequestContentLength	.\libhttpd\httpd.h	84;"	d
httpdRequestContentType	.\install\include\wifidog\httpd.h	83;"	d
httpdRequestContentType	.\libhttpd\httpd.h	83;"	d
httpdRequestMethod	.\install\include\wifidog\httpd.h	81;"	d
httpdRequestMethod	.\libhttpd\httpd.h	81;"	d
httpdRequestMethodName	.\libhttpd\api.c	/^httpdRequestMethodName(request * r)$/;"	f
httpdRequestPath	.\install\include\wifidog\httpd.h	82;"	d
httpdRequestPath	.\libhttpd\httpd.h	82;"	d
httpdSendFile	.\libhttpd\api.c	/^httpdSendFile(httpd * server, request * r, const char *path)$/;"	f
httpdSendHeaders	.\libhttpd\api.c	/^httpdSendHeaders(request * r)$/;"	f
httpdSetAccessLog	.\libhttpd\api.c	/^httpdSetAccessLog(server, fp)$/;"	f
httpdSetContentType	.\libhttpd\api.c	/^httpdSetContentType(request * r, const char *type)$/;"	f
httpdSetCookie	.\libhttpd\api.c	/^httpdSetCookie(request * r, const char *name, const char *value)$/;"	f
httpdSetDefaultAcl	.\libhttpd\ip_acl.c	/^httpdSetDefaultAcl(server, acl)$/;"	f
httpdSetErrorFunction	.\libhttpd\api.c	/^httpdSetErrorFunction(httpd * server, int error, void (*function) ())$/;"	f
httpdSetErrorLog	.\libhttpd\api.c	/^httpdSetErrorLog(server, fp)$/;"	f
httpdSetFileBase	.\libhttpd\api.c	/^httpdSetFileBase(server, path)$/;"	f
httpdSetResponse	.\libhttpd\api.c	/^httpdSetResponse(request * r, const char *msg)$/;"	f
httpdSetVariableValue	.\libhttpd\api.c	/^httpdSetVariableValue(request * r, const char *name, const char *value)$/;"	f
httpdUrlEncode	.\libhttpd\api.c	/^httpdUrlEncode(str)$/;"	f
httpdmaxconn	.\src\conf.h	/^    int httpdmaxconn;           \/**< @brief Used by libhttpd, not sure what it$/;"	m	struct:__anon13
httpdname	.\src\conf.h	/^    char *httpdname;            \/**< @brief Name the web server will return when$/;"	m	struct:__anon13
httpdpassword	.\src\conf.h	/^    char *httpdpassword;        \/**< @brief Password for HTTP authentication *\/$/;"	m	struct:__anon13
httpdrealm	.\src\conf.h	/^    char *httpdrealm;           \/**< @brief HTTP Authentication realm *\/$/;"	m	struct:__anon13
httpdusername	.\src\conf.h	/^    char *httpdusername;        \/**< @brief Username for HTTP authentication *\/$/;"	m	struct:__anon13
https_get	.\src\simple_http.c	/^https_get(const int sockfd, const char *req, const char *hostname)$/;"	f
icmp_fd	.\src\util.c	/^static int icmp_fd;$/;"	v	file:
icmp_ping	.\src\util.c	/^icmp_ping(const char *host)$/;"	f
id	.\src\client_list.h	/^    unsigned long long id;           \/**< @brief Unique ID per client *\/$/;"	m	struct:_t_client
ifModified	.\install\include\wifidog\httpd.h	/^         ifModified[HTTP_MAX_URL];$/;"	m	struct:__anon1
ifModified	.\libhttpd\httpd.h	/^         ifModified[HTTP_MAX_URL];$/;"	m	struct:__anon5
incoming	.\src\client_list.h	/^    unsigned long long incoming;        \/**< @brief Incoming data total*\/$/;"	m	struct:_t_counters
incoming_delta	.\src\client_list.h	/^    unsigned long long incoming_delta;                    \/**< @brief Incoming data after last report*\/$/;"	m	struct:_t_counters
incoming_history	.\src\client_list.h	/^    unsigned long long incoming_history;        \/**< @brief Incoming data before wifidog restarted*\/$/;"	m	struct:_t_counters
indexFlag	.\install\include\wifidog\httpd.h	/^        int type, indexFlag;$/;"	m	struct:_httpd_content
indexFlag	.\libhttpd\httpd.h	/^        int type, indexFlag;$/;"	m	struct:_httpd_content
init_config	.\src\wdctl.c	/^init_config(void)$/;"	f	file:
init_icmp_socket	.\src\util.c	/^init_icmp_socket(void)$/;"	f
init_signals	.\src\gateway.c	/^init_signals(void)$/;"	f	file:
internal_sock	.\src\conf.h	/^    char *internal_sock;                \/**< @brief internal path to socket *\/$/;"	m	struct:__anon13
ip	.\src\client_list.h	/^    char *ip;                           \/**< @brief Client Ip address *\/$/;"	m	struct:_t_client
ip_acl_s	.\install\include\wifidog\httpd.h	/^    typedef struct ip_acl_s {$/;"	s
ip_acl_s	.\libhttpd\httpd.h	/^    typedef struct ip_acl_s {$/;"	s
iptables_compile	.\src\fw_iptables.c	/^iptables_compile(const char *table, const char *chain, const t_firewall_rule * rule)$/;"	f	file:
iptables_do_command	.\src\fw_iptables.c	/^iptables_do_command(const char *format, ...)$/;"	f	file:
iptables_fw_access	.\src\fw_iptables.c	/^iptables_fw_access(fw_access_t type, const char *ip, const char *mac, int tag)$/;"	f
iptables_fw_access_host	.\src\fw_iptables.c	/^iptables_fw_access_host(fw_access_t type, const char *host)$/;"	f
iptables_fw_auth_reachable	.\src\fw_iptables.c	/^iptables_fw_auth_reachable(void)$/;"	f
iptables_fw_auth_unreachable	.\src\fw_iptables.c	/^iptables_fw_auth_unreachable(int tag)$/;"	f
iptables_fw_clear_authservers	.\src\fw_iptables.c	/^iptables_fw_clear_authservers(void)$/;"	f
iptables_fw_counters_update	.\src\fw_iptables.c	/^iptables_fw_counters_update(void)$/;"	f
iptables_fw_destroy	.\src\fw_iptables.c	/^iptables_fw_destroy(void)$/;"	f
iptables_fw_destroy_mention	.\src\fw_iptables.c	/^iptables_fw_destroy_mention(const char *table, const char *chain, const char *mention)$/;"	f
iptables_fw_init	.\src\fw_iptables.c	/^iptables_fw_init(void)$/;"	f
iptables_fw_set_authservers	.\src\fw_iptables.c	/^iptables_fw_set_authservers(void)$/;"	f
iptables_insert_gateway_id	.\src\fw_iptables.c	/^iptables_insert_gateway_id(char **input)$/;"	f	file:
iptables_load_ruleset	.\src\fw_iptables.c	/^iptables_load_ruleset(const char *table, const char *ruleset, const char *chain)$/;"	f	file:
isAcceptable	.\libhttpd\protocol.c	/^static unsigned char isAcceptable[96] =$/;"	v	file:
is_auth_online	.\src\wd_util.c	/^is_auth_online()$/;"	f
is_online	.\src\wd_util.c	/^is_online()$/;"	f
keywords	.\src\conf.c	/^} keywords[] = {$/;"	v	typeref:struct:__anon11	file:
lastError	.\install\include\wifidog\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon3
lastError	.\libhttpd\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon7
last_auth_offline_time	.\src\wd_util.c	/^static time_t last_auth_offline_time = 0;$/;"	v	file:
last_auth_online_time	.\src\wd_util.c	/^static time_t last_auth_online_time = 0;$/;"	v	file:
last_ip	.\src\conf.h	/^    char *last_ip;      \/**< @brief Last ip used by authserver *\/$/;"	m	struct:_auth_serv_t
last_offline_time	.\src\wd_util.c	/^static time_t last_offline_time = 0;$/;"	v	file:
last_online_time	.\src\wd_util.c	/^static time_t last_online_time = 0;$/;"	v	file:
last_updated	.\src\client_list.h	/^    time_t last_updated;        \/**< @brief Last update of the counters *\/$/;"	m	struct:_t_counters
len	.\install\include\wifidog\httpd.h	/^        char len, action;$/;"	m	struct:ip_acl_s
len	.\libhttpd\httpd.h	/^        char len, action;$/;"	m	struct:ip_acl_s
len	.\src\pstring.h	/^    size_t len;  \/**< @brief Current length of the string. *\/$/;"	m	struct:pstr
log_stderr	.\src\debug.h	/^    int log_stderr;      \/**< @brief Output log to stdout *\/$/;"	m	struct:_debug_conf
log_syslog	.\src\debug.h	/^    int log_syslog;      \/**< @brief Output log to syslog *\/$/;"	m	struct:_debug_conf
logout_client	.\src\auth.c	/^logout_client(t_client * client)$/;"	f
mac	.\src\client_list.h	/^    char *mac;                          \/**< @brief Client Mac address *\/$/;"	m	struct:_t_client
mac	.\src\conf.h	/^    char *mac;$/;"	m	struct:_trusted_mac_t
main	.\contrib\load-tester\fire_requests.py	/^def main(targetIF, prefix, maxI):$/;"	f
main	.\contrib\load-tester\mock_auth.py	/^def main():$/;"	f
main	.\contrib\load-tester\plot_memory.sh	/^function main {$/;"	f
main	.\contrib\load-tester\run.sh	/^function main() {$/;"	f
main	.\src\main.c	/^main(int argc, char **argv)$/;"	f
main	.\src\wdctl.c	/^main(int argc, char **argv)$/;"	f
main_loop	.\src\gateway.c	/^main_loop(void)$/;"	f	file:
main_single	.\contrib\load-tester\fire_requests.py	/^def main_single(target, prefix, i):$/;"	f
main_single	.\contrib\load-tester\fire_wdctl.py	/^def main_single(target, prefix, i):$/;"	f
mark_auth_offline	.\src\wd_util.c	/^mark_auth_offline()$/;"	f
mark_auth_online	.\src\wd_util.c	/^mark_auth_online()$/;"	f
mark_auth_server_bad	.\src\conf.c	/^mark_auth_server_bad(t_auth_serv * bad_server)$/;"	f
mark_offline	.\src\wd_util.c	/^mark_offline()$/;"	f
mark_online	.\src\wd_util.c	/^mark_online()$/;"	f
mask	.\src\conf.h	/^    char *mask;                 \/**< @brief Mask for the rule *destination* *\/$/;"	m	struct:_firewall_rule_t
mask_is_ipset	.\src\conf.h	/^    int mask_is_ipset; \/**< @brief *destination* is ipset  *\/$/;"	m	struct:_firewall_rule_t
method	.\install\include\wifidog\httpd.h	/^        int method, contentLength, authLength;$/;"	m	struct:__anon1
method	.\libhttpd\httpd.h	/^        int method, contentLength, authLength;$/;"	m	struct:__anon5
missing_parms	.\src\conf.c	/^static int missing_parms;$/;"	v	file:
name	.\install\include\wifidog\httpd.h	/^        char *name, *value;$/;"	m	struct:_httpd_var
name	.\install\include\wifidog\httpd.h	/^        char *name;$/;"	m	struct:_httpd_content
name	.\install\include\wifidog\httpd.h	/^        char *name;$/;"	m	struct:_httpd_dir
name	.\libhttpd\httpd.h	/^        char *name, *value;$/;"	m	struct:_httpd_var
name	.\libhttpd\httpd.h	/^        char *name;$/;"	m	struct:_httpd_content
name	.\libhttpd\httpd.h	/^        char *name;$/;"	m	struct:_httpd_dir
name	.\src\conf.c	/^    const char *name;$/;"	m	struct:__anon11	file:
name	.\src\conf.h	/^    char *name;$/;"	m	struct:_firewall_ruleset_t
next	.\install\include\wifidog\httpd.h	/^        struct _httpd_content *next;$/;"	m	struct:_httpd_content	typeref:struct:_httpd_content::_httpd_content
next	.\install\include\wifidog\httpd.h	/^        struct _httpd_dir *children, *next;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::
next	.\install\include\wifidog\httpd.h	/^        struct ip_acl_s *next;$/;"	m	struct:ip_acl_s	typeref:struct:ip_acl_s::ip_acl_s
next	.\libhttpd\httpd.h	/^        struct _httpd_content *next;$/;"	m	struct:_httpd_content	typeref:struct:_httpd_content::_httpd_content
next	.\libhttpd\httpd.h	/^        struct _httpd_dir *children, *next;$/;"	m	struct:_httpd_dir	typeref:struct:_httpd_dir::
next	.\libhttpd\httpd.h	/^        struct ip_acl_s *next;$/;"	m	struct:ip_acl_s	typeref:struct:ip_acl_s::ip_acl_s
next	.\src\client_list.h	/^    struct _t_client *next;             \/**< @brief Pointer to the next client *\/$/;"	m	struct:_t_client	typeref:struct:_t_client::_t_client
next	.\src\conf.h	/^    struct _auth_serv_t *next;$/;"	m	struct:_auth_serv_t	typeref:struct:_auth_serv_t::_auth_serv_t
next	.\src\conf.h	/^    struct _firewall_rule_t *next;$/;"	m	struct:_firewall_rule_t	typeref:struct:_firewall_rule_t::_firewall_rule_t
next	.\src\conf.h	/^    struct _firewall_ruleset_t *next;$/;"	m	struct:_firewall_ruleset_t	typeref:struct:_firewall_ruleset_t::_firewall_ruleset_t
next	.\src\conf.h	/^    struct _popular_server_t *next;$/;"	m	struct:_popular_server_t	typeref:struct:_popular_server_t::_popular_server_t
next	.\src\conf.h	/^    struct _trusted_mac_t *next;$/;"	m	struct:_trusted_mac_t	typeref:struct:_trusted_mac_t::_trusted_mac_t
next	.\src\safe.c	/^    struct _fd_list *next;  \/**< @brief linked list pointer *\/$/;"	m	struct:_fd_list	typeref:struct:_fd_list::_fd_list	file:
nextValue	.\install\include\wifidog\httpd.h	/^        struct _httpd_var *nextValue, *nextVariable;$/;"	m	struct:_httpd_var	typeref:struct:_httpd_var::_httpd_var
nextValue	.\libhttpd\httpd.h	/^        struct _httpd_var *nextValue, *nextVariable;$/;"	m	struct:_httpd_var	typeref:struct:_httpd_var::_httpd_var
nextVariable	.\install\include\wifidog\httpd.h	/^        struct _httpd_var *nextValue, *nextVariable;$/;"	m	struct:_httpd_var	typeref:struct:_httpd_var::
nextVariable	.\libhttpd\httpd.h	/^        struct _httpd_var *nextValue, *nextVariable;$/;"	m	struct:_httpd_var	typeref:struct:_httpd_var::
oAuthServAuthScriptPathFragment	.\src\conf.c	/^    oAuthServAuthScriptPathFragment,$/;"	e	enum:__anon10	file:
oAuthServHTTPPort	.\src\conf.c	/^    oAuthServHTTPPort,$/;"	e	enum:__anon10	file:
oAuthServHostname	.\src\conf.c	/^    oAuthServHostname,$/;"	e	enum:__anon10	file:
oAuthServLoginScriptPathFragment	.\src\conf.c	/^    oAuthServLoginScriptPathFragment,$/;"	e	enum:__anon10	file:
oAuthServMsgScriptPathFragment	.\src\conf.c	/^    oAuthServMsgScriptPathFragment,$/;"	e	enum:__anon10	file:
oAuthServPath	.\src\conf.c	/^    oAuthServPath,$/;"	e	enum:__anon10	file:
oAuthServPingScriptPathFragment	.\src\conf.c	/^    oAuthServPingScriptPathFragment,$/;"	e	enum:__anon10	file:
oAuthServPortalScriptPathFragment	.\src\conf.c	/^    oAuthServPortalScriptPathFragment,$/;"	e	enum:__anon10	file:
oAuthServSSLAvailable	.\src\conf.c	/^    oAuthServSSLAvailable,$/;"	e	enum:__anon10	file:
oAuthServSSLPort	.\src\conf.c	/^    oAuthServSSLPort,$/;"	e	enum:__anon10	file:
oAuthServer	.\src\conf.c	/^    oAuthServer,$/;"	e	enum:__anon10	file:
oBadOption	.\src\conf.c	/^    oBadOption,$/;"	e	enum:__anon10	file:
oCheckInterval	.\src\conf.c	/^    oCheckInterval,$/;"	e	enum:__anon10	file:
oClientTimeout	.\src\conf.c	/^    oClientTimeout,$/;"	e	enum:__anon10	file:
oDaemon	.\src\conf.c	/^    oDaemon,$/;"	e	enum:__anon10	file:
oDebugLevel	.\src\conf.c	/^    oDebugLevel,$/;"	e	enum:__anon10	file:
oDeltaTraffic	.\src\conf.c	/^    oDeltaTraffic,$/;"	e	enum:__anon10	file:
oExternalInterface	.\src\conf.c	/^    oExternalInterface,$/;"	e	enum:__anon10	file:
oFirewallRule	.\src\conf.c	/^    oFirewallRule,$/;"	e	enum:__anon10	file:
oFirewallRuleSet	.\src\conf.c	/^    oFirewallRuleSet,$/;"	e	enum:__anon10	file:
oGatewayAddress	.\src\conf.c	/^    oGatewayAddress,$/;"	e	enum:__anon10	file:
oGatewayID	.\src\conf.c	/^    oGatewayID,$/;"	e	enum:__anon10	file:
oGatewayInterface	.\src\conf.c	/^    oGatewayInterface,$/;"	e	enum:__anon10	file:
oGatewayPort	.\src\conf.c	/^    oGatewayPort,$/;"	e	enum:__anon10	file:
oHTTPDMaxConn	.\src\conf.c	/^    oHTTPDMaxConn,$/;"	e	enum:__anon10	file:
oHTTPDName	.\src\conf.c	/^    oHTTPDName,$/;"	e	enum:__anon10	file:
oHTTPDPassword	.\src\conf.c	/^    oHTTPDPassword,$/;"	e	enum:__anon10	file:
oHTTPDRealm	.\src\conf.c	/^    oHTTPDRealm,$/;"	e	enum:__anon10	file:
oHTTPDUsername	.\src\conf.c	/^    oHTTPDUsername,$/;"	e	enum:__anon10	file:
oHtmlMessageFile	.\src\conf.c	/^    oHtmlMessageFile,$/;"	e	enum:__anon10	file:
oPopularServers	.\src\conf.c	/^    oPopularServers,$/;"	e	enum:__anon10	file:
oProxyPort	.\src\conf.c	/^    oProxyPort,$/;"	e	enum:__anon10	file:
oSSLAllowedCipherList	.\src\conf.c	/^    oSSLAllowedCipherList,$/;"	e	enum:__anon10	file:
oSSLCertPath	.\src\conf.c	/^    oSSLCertPath,$/;"	e	enum:__anon10	file:
oSSLPeerVerification	.\src\conf.c	/^    oSSLPeerVerification,$/;"	e	enum:__anon10	file:
oSSLUseSNI	.\src\conf.c	/^    oSSLUseSNI,$/;"	e	enum:__anon10	file:
oSyslogFacility	.\src\conf.c	/^    oSyslogFacility,$/;"	e	enum:__anon10	file:
oTrustedMACList	.\src\conf.c	/^    oTrustedMACList,$/;"	e	enum:__anon10	file:
oWdctlSocket	.\src\conf.c	/^    oWdctlSocket,$/;"	e	enum:__anon10	file:
opcode	.\src\conf.c	/^    OpCodes opcode;$/;"	m	struct:__anon11	file:
outgoing	.\src\client_list.h	/^    unsigned long long outgoing;        \/**< @brief Outgoing data total*\/$/;"	m	struct:_t_counters
outgoing_delta	.\src\client_list.h	/^    unsigned long long outgoing_delta;                    \/**< @brief Outgoing data after last report*\/$/;"	m	struct:_t_counters
outgoing_history	.\src\client_list.h	/^    unsigned long long outgoing_history;        \/**< @brief Outgoing data before wifidog restarted*\/$/;"	m	struct:_t_counters
p	.\contrib\load-tester\fire_requests.py	/^    p = Pool(int(args.process_count))$/;"	v
p	.\contrib\load-tester\fire_wdctl.py	/^    p = Pool(int(args.process_count))$/;"	v
param	.\src\wdctl.h	/^    char *param;$/;"	m	struct:__anon14
parse_auth_server	.\src\conf.c	/^parse_auth_server(FILE * file, const char *filename, int *linenum)$/;"	f	file:
parse_boolean_value	.\src\conf.c	/^parse_boolean_value(char *line)$/;"	f	file:
parse_commandline	.\src\commandline.c	/^parse_commandline(int argc, char **argv)$/;"	f
parse_commandline	.\src\wdctl.c	/^parse_commandline(int argc, char **argv)$/;"	f
parse_firewall_ruleset	.\src\conf.c	/^parse_firewall_ruleset(const char *ruleset, FILE * file, const char *filename, int *linenum)$/;"	f	file:
parse_popular_servers	.\src\conf.c	/^parse_popular_servers(const char *ptr)$/;"	f	file:
parse_trusted_mac_list	.\src\conf.c	/^parse_trusted_mac_list(const char *ptr)$/;"	f	file:
parser	.\contrib\load-tester\fire_requests.py	/^    parser = common.get_argparser()$/;"	v
parser	.\contrib\load-tester\fire_wdctl.py	/^    parser = common.get_argparser()$/;"	v
partial	.\contrib\load-tester\fire_requests.py	/^    partial = functools.partial($/;"	v
partial	.\contrib\load-tester\fire_wdctl.py	/^    partial = functools.partial($/;"	v
path	.\install\include\wifidog\httpd.h	/^        char *data, *path;$/;"	m	struct:_httpd_content
path	.\install\include\wifidog\httpd.h	/^        char path[HTTP_MAX_URL], query[HTTP_MAX_URL], host[HTTP_MAX_URL],       \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon1
path	.\libhttpd\httpd.h	/^        char *data, *path;$/;"	m	struct:_httpd_content
path	.\libhttpd\httpd.h	/^        char path[HTTP_MAX_URL], query[HTTP_MAX_URL], host[HTTP_MAX_URL],       \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon5
pidfile	.\src\conf.h	/^    char *pidfile;            \/**< @brief pid file path of wifidog *\/$/;"	m	struct:__anon13
ping	.\src\ping_thread.c	/^ping(void)$/;"	f	file:
plot	.\contrib\load-tester\plot_memory.sh	/^function plot {$/;"	f
popular_servers	.\src\conf.h	/^    t_popular_server *popular_servers; \/**< @brief list of popular servers *\/$/;"	m	struct:__anon13
port	.\install\include\wifidog\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon3
port	.\libhttpd\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon7
port	.\src\conf.h	/^    char *port;                 \/**< @brief Port to block\/allow *\/$/;"	m	struct:_firewall_rule_t
preload	.\install\include\wifidog\httpd.h	/^        int (*preload) ();$/;"	m	struct:_httpd_content
preload	.\libhttpd\httpd.h	/^        int (*preload) ();$/;"	m	struct:_httpd_content
protocol	.\src\conf.h	/^    char *protocol;             \/**< @brief tcp, udp, etc ... *\/$/;"	m	struct:_firewall_rule_t
proxy_port	.\src\conf.h	/^    int proxy_port;             \/**< @brief Transparent proxy port (0 to disable) *\/$/;"	m	struct:__anon13
pstr	.\src\pstring.h	/^struct pstr {$/;"	s
pstr_append_sprintf	.\src\pstring.c	/^pstr_append_sprintf(pstr_t *pstr, const char *fmt, ...)$/;"	f
pstr_cat	.\src\pstring.c	/^pstr_cat(pstr_t *pstr, const char *string)$/;"	f
pstr_new	.\src\pstring.c	/^pstr_new(void)$/;"	f
pstr_t	.\src\pstring.h	/^typedef struct pstr pstr_t;  \/**< @brief pstr_t is a type for a struct pstr. *\/$/;"	t	typeref:struct:pstr
pstr_to_string	.\src\pstring.c	/^pstr_to_string(pstr_t *pstr)$/;"	f
query	.\install\include\wifidog\httpd.h	/^        char path[HTTP_MAX_URL], query[HTTP_MAX_URL], host[HTTP_MAX_URL],       \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon1
query	.\libhttpd\httpd.h	/^        char path[HTTP_MAX_URL], query[HTTP_MAX_URL], host[HTTP_MAX_URL],       \/* acv@acv.ca\/wifidog: Added decoding$/;"	m	struct:__anon5
rand16	.\src\util.c	/^rand16(void)$/;"	f	file:
random	.\contrib\load-tester\fire_requests.py	/^import random$/;"	i
random	.\contrib\load-tester\fire_wdctl.py	/^import random$/;"	i
random	.\contrib\load-tester\mock_auth.py	/^import random$/;"	i
readBuf	.\install\include\wifidog\httpd.h	/^        char readBuf[HTTP_READ_BUF_LEN + 1], *readBufPtr, clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon4
readBuf	.\libhttpd\httpd.h	/^        char readBuf[HTTP_READ_BUF_LEN + 1], *readBufPtr, clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon8
readBufPtr	.\install\include\wifidog\httpd.h	/^        char readBuf[HTTP_READ_BUF_LEN + 1], *readBufPtr, clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon4
readBufPtr	.\libhttpd\httpd.h	/^        char readBuf[HTTP_READ_BUF_LEN + 1], *readBufPtr, clientAddr[HTTP_IP_ADDR_LEN];$/;"	m	struct:__anon8
readBufRemain	.\install\include\wifidog\httpd.h	/^        int clientSock, readBufRemain;$/;"	m	struct:__anon4
readBufRemain	.\libhttpd\httpd.h	/^        int clientSock, readBufRemain;$/;"	m	struct:__anon8
register_fd_cleanup_on_fork	.\src\safe.c	/^register_fd_cleanup_on_fork(const int fd)$/;"	f
request	.\install\include\wifidog\httpd.h	/^        httpReq request;$/;"	m	struct:__anon4
request	.\install\include\wifidog\httpd.h	/^    } request;$/;"	t	typeref:struct:__anon4
request	.\libhttpd\httpd.h	/^        httpReq request;$/;"	m	struct:__anon8
request	.\libhttpd\httpd.h	/^    } request;$/;"	t	typeref:struct:__anon8
response	.\install\include\wifidog\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon2
response	.\install\include\wifidog\httpd.h	/^        httpRes response;$/;"	m	struct:__anon4
response	.\libhttpd\httpd.h	/^        char headersSent, headers[HTTP_MAX_HEADERS], response[HTTP_MAX_URL], contentType[HTTP_MAX_URL];$/;"	m	struct:__anon6
response	.\libhttpd\httpd.h	/^        httpRes response;$/;"	m	struct:__anon8
responseLength	.\install\include\wifidog\httpd.h	/^        int responseLength;$/;"	m	struct:__anon2
responseLength	.\libhttpd\httpd.h	/^        int responseLength;$/;"	m	struct:__anon6
restart_orig_pid	.\src\commandline.c	/^pid_t restart_orig_pid = 0;$/;"	v
restartargv	.\src\commandline.c	/^char ** restartargv = NULL;$/;"	v
rules	.\src\conf.h	/^    t_firewall_rule *rules;$/;"	m	struct:_firewall_ruleset_t
rulesets	.\src\conf.h	/^    t_firewall_ruleset *rulesets;       \/**< @brief firewall rules *\/$/;"	m	struct:__anon13
s_config	.\src\conf.h	/^} s_config;$/;"	t	typeref:struct:__anon13
s_config	.\src\wdctl.h	/^} s_config;$/;"	t	typeref:struct:__anon14
safe_asprintf	.\src\safe.c	/^safe_asprintf(char **strp, const char *fmt, ...)$/;"	f
safe_fork	.\src\safe.c	/^safe_fork(void)$/;"	f
safe_malloc	.\src\safe.c	/^safe_malloc(size_t size)$/;"	f
safe_realloc	.\src\safe.c	/^safe_realloc(void *ptr, size_t newsize)$/;"	f
safe_strdup	.\src\safe.c	/^safe_strdup(const char *s)$/;"	f
safe_vasprintf	.\src\safe.c	/^safe_vasprintf(char **strp, const char *fmt, va_list ap)$/;"	f
save_pid_file	.\src\util.c	/^save_pid_file(const char *pf)$/;"	f
scanCidr	.\libhttpd\ip_acl.c	/^scanCidr(val, result, length)$/;"	f	file:
send_http_page	.\src\http.c	/^send_http_page(request * r, const char *title, const char *message)$/;"	f
send_request	.\src\wdctl.c	/^send_request(int sock, const char *request)$/;"	f	file:
served_this_session	.\src\wd_util.c	/^long served_this_session = 0;$/;"	v
serverSock	.\install\include\wifidog\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon3
serverSock	.\libhttpd\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon7
sigchld_handler	.\src\gateway.c	/^sigchld_handler(int s)$/;"	f
size	.\src\pstring.h	/^    size_t size; \/**< @brief Current maximum size of the buffer. *\/$/;"	m	struct:pstr
socket	.\contrib\load-tester\common.py	/^import socket$/;"	i
socket	.\src\wdctl.h	/^    char *socket;$/;"	m	struct:__anon14
ssl_certs	.\src\conf.h	/^    char *ssl_certs;            \/**< @brief Path to SSL certs for auth server$/;"	m	struct:__anon13
ssl_cipher_list	.\src\conf.h	/^    char *ssl_cipher_list;  \/**< @brief List of SSL ciphers allowed. Optional. *\/$/;"	m	struct:__anon13
ssl_use_sni	.\src\conf.h	/^    int ssl_use_sni;            \/**< @brief boolean, whether to enable$/;"	m	struct:__anon13
ssl_verify	.\src\conf.h	/^    int ssl_verify;             \/**< @brief boolean, whether to enable$/;"	m	struct:__anon13
start	.\contrib\load-tester\generate_interfaces.sh	/^function start() {$/;"	f
startTime	.\install\include\wifidog\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon3
startTime	.\libhttpd\httpd.h	/^        int port, serverSock, startTime, lastError;$/;"	m	struct:__anon7
started_time	.\src\gateway.c	/^time_t started_time = 0;$/;"	v
stop	.\contrib\load-tester\generate_interfaces.sh	/^function stop() {$/;"	f
struct	.\contrib\load-tester\common.py	/^import struct$/;"	i
subprocess	.\contrib\load-tester\fire_wdctl.py	/^import subprocess$/;"	i
syslog_facility	.\src\debug.h	/^    int syslog_facility; \/**< @brief facility to use when using syslog for logging *\/$/;"	m	struct:_debug_conf
t_auth_serv	.\src\conf.h	/^} t_auth_serv;$/;"	t	typeref:struct:_auth_serv_t
t_authcode	.\src\auth.h	/^} t_authcode;$/;"	t	typeref:enum:__anon9
t_authresponse	.\src\auth.h	/^} t_authresponse;$/;"	t	typeref:struct:_t_authresponse
t_client	.\src\client_list.h	/^} t_client;$/;"	t	typeref:struct:_t_client
t_counters	.\src\client_list.h	/^} t_counters;$/;"	t	typeref:struct:_t_counters
t_firewall_rule	.\src\conf.h	/^} t_firewall_rule;$/;"	t	typeref:struct:_firewall_rule_t
t_firewall_ruleset	.\src\conf.h	/^} t_firewall_ruleset;$/;"	t	typeref:struct:_firewall_ruleset_t
t_firewall_target	.\src\conf.h	/^} t_firewall_target;$/;"	t	typeref:enum:__anon12
t_fw_marks	.\src\firewall.h	/^} t_fw_marks;$/;"	t	typeref:enum:_t_fw_marks
t_popular_server	.\src\conf.h	/^} t_popular_server;$/;"	t	typeref:struct:_popular_server_t
t_trusted_mac	.\src\conf.h	/^} t_trusted_mac;$/;"	t	typeref:struct:_trusted_mac_t
target	.\contrib\load-tester\fire_requests.py	/^    target = common.get_ip_address(args.target_interface)$/;"	v
target	.\contrib\load-tester\fire_wdctl.py	/^    target = common.get_ip_address(args.target_interface)$/;"	v
target	.\src\conf.h	/^    t_firewall_target target;   \/**< @brief t_firewall_target *\/$/;"	m	struct:_firewall_rule_t
termination_handler	.\src\gateway.c	/^termination_handler(int s)$/;"	f
thread_client_timeout_check	.\src\auth.c	/^thread_client_timeout_check(const void *arg)$/;"	f
thread_httpd	.\src\httpd_thread.c	/^thread_httpd(void *args)$/;"	f
thread_ping	.\src\ping_thread.c	/^thread_ping(void *arg)$/;"	f
thread_wdctl	.\src\wdctl_thread.c	/^thread_wdctl(void *arg)$/;"	f
thread_wdctl_handler	.\src\wdctl_thread.c	/^thread_wdctl_handler(void *arg)$/;"	f	file:
tid_fw_counter	.\src\gateway.c	/^static pthread_t tid_fw_counter = 0;$/;"	v	file:
tid_ping	.\src\gateway.c	/^static pthread_t tid_ping = 0;$/;"	v	file:
token	.\src\client_list.h	/^    char *token;                        \/**< @brief Client token *\/$/;"	m	struct:_t_client
trustedmaclist	.\src\conf.h	/^    t_trusted_mac *trustedmaclist; \/**< @brief list of trusted macs *\/$/;"	m	struct:__anon13
type	.\install\include\wifidog\httpd.h	/^        int type, indexFlag;$/;"	m	struct:_httpd_content
type	.\libhttpd\httpd.h	/^        int type, indexFlag;$/;"	m	struct:_httpd_content
usage	.\src\commandline.c	/^usage(void)$/;"	f	file:
usage	.\src\wdctl.c	/^usage(void)$/;"	f	file:
uuid	.\contrib\load-tester\fire_requests.py	/^import uuid$/;"	i
validate_popular_servers	.\src\conf.c	/^validate_popular_servers(void)$/;"	f	file:
value	.\install\include\wifidog\httpd.h	/^        char *name, *value;$/;"	m	struct:_httpd_var
value	.\libhttpd\httpd.h	/^        char *name, *value;$/;"	m	struct:_httpd_var
variables	.\install\include\wifidog\httpd.h	/^        httpVar *variables;$/;"	m	struct:__anon4
variables	.\libhttpd\httpd.h	/^        httpVar *variables;$/;"	m	struct:__anon8
wd_gethostbyname	.\src\util.c	/^wd_gethostbyname(const char *name)$/;"	f
wdctl_reset	.\src\wdctl.c	/^wdctl_reset(void)$/;"	f
wdctl_reset	.\src\wdctl_thread.c	/^wdctl_reset(int fd, const char *arg)$/;"	f	file:
wdctl_restart	.\src\wdctl.c	/^wdctl_restart(void)$/;"	f	file:
wdctl_restart	.\src\wdctl_thread.c	/^wdctl_restart(int afd)$/;"	f	file:
wdctl_sock	.\src\conf.h	/^    char *wdctl_sock;           \/**< @brief wdctl path to socket *\/$/;"	m	struct:__anon13
wdctl_socket_server	.\src\wdctl_thread.c	/^static int wdctl_socket_server;$/;"	v	file:
wdctl_status	.\src\wdctl.c	/^wdctl_status(void)$/;"	f	file:
wdctl_status	.\src\wdctl_thread.c	/^wdctl_status(int fd)$/;"	f	file:
wdctl_stop	.\src\wdctl.c	/^wdctl_stop(void)$/;"	f	file:
wdctl_stop	.\src\wdctl_thread.c	/^wdctl_stop(int fd)$/;"	f	file:
webserver	.\src\gateway.c	/^httpd * webserver = NULL;$/;"	v
write_to_socket	.\src\wdctl_thread.c	/^write_to_socket(int fd, char *text, size_t len)$/;"	f	file:
